(define (memq item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))

(memq 'apple '(pear banana prune))
(memq 'apple '(x (apple sauce) y apple pear hello))

(pair? (car '(a short list)))
(pair? (cdr '(a short list)))

(list? 'a)
(list? '(a b c))

;; 2.54
(define (s/equal? x y)
  (cond ((and (null? x) (null? y)) true)
        ((or (null? x) (null? y)) false)
        ((and (list? x) (list? y)) (and (s/equal? (car x) (car y))
                                        (s/equal? (cdr x) (cdr y))))
        (else (eq? x y))))

(s/equal? 1 1)
(s/equal? () ())
(s/equal? () 1)
(s/equal? 1 ())
(s/equal? 1 'a)
(s/equal? 1 '(1))
(s/equal? '(a b) '(a b))
(s/equal? '(a b) '(a b c))

(s/equal? '(this is a list) '(this is a list))
(s/equal? '(this is a list) '(this (is a) list))

;; 2.55
(car ''abracadabra)
(car (quote 'abracadabra))
(car '(quote abracadabra))
(car (quote (quote abracadabra)))

;; 2.3.2
(define (variable? e) (symbol? e))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(eq? 0 '0) ;; true
(define (=number? exp num)
  (and (number? exp) (eq? exp num)))

(define (make-sum a1 . a3)
  (let ((exps (make-sum-iter (cons a1 a3) '())))
    (cond ((null? exps) 0)
          ((null? (cdr exps)) (car exps))
          (else (let ((es (filter (lambda (x) (not (number? x))) exps))
                      (nm (reduce + 0 (filter number? exps))))
                  (if (zero? nm)
                      (cons '+ es)
                      (cons '+ (cons nm es))))))))

(define (make-sum-iter exps results)
  (cond ((null? exps) results)
        ((=number? (car exps) 0)
         (make-sum-iter (cdr exps) results))
        ((sum? (car exps))
         (make-sum-iter (cons (augend (car exps))
                              (cdr exps))
                        (cons (addend (car exps)) results)))
        (else
         (make-sum-iter (cdr exps) (cons (car exps) results)))))

(define (sum? e) (and (pair? e) (eq? '+ (car e))))
(define (addend e) (car (cdr e)))
(define (augend e)
  (let ((rest (cdr (cdr e))))
    (if (null? (cdr rest))
        (car rest)
        (apply make-sum rest))))

(define (make-product a1 . a3)
  (if (memq 0 (cons a1 a3))
      0
      (let ((exps (make-product-iter (cons a1 a3) '())))
        (cond ((null? exps) 1)
              ((null? (cdr exps)) (car exps))
              (else (let ((es (filter (lambda (x) (not (number? x))) exps))
                          (nm (reduce * 1 (filter number? exps))))
                      (if (eq? nm 1)
                          (cons '* es)
                          (cons '* (cons nm es)))))))))

(define (make-product-iter exps results)
  (cond ((null? exps) results)
        ((=number? (car exps) 1)
         (make-product-iter (cdr exps) results))
        ((product? (car exps))
         (make-product-iter (cons (multiplier (car exps))
                                  (cdr exps))
                        (cons (multiplicand (car exps)) results)))
        (else
         (make-product-iter (cdr exps) (cons (car exps) results)))))

(define (product? e) (and (pair? e) (eq? '* (car e))))
(define (multiplier e) (car (cdr e)))
(define (multiplicand e)
  (let ((rest (cdr (cdr e))))
    (if (null? (cdr rest))
        (car rest)
        (apply make-product rest))))

(define (make-exponentiation base ex)
  (cond ((=number? ex 0) 1)
        ((=number? ex 1) base)
        ((=number? base 0) 0)
        ((=number? base 1) 1)
        ((and (number? base) (number? ex)) (expt base ex))
        (else (list '** base ex))))
(define (exponentiation? exp)
  (and (pair? exp) (eq? '** (car exp))))
(define (base exp) (car (cdr exp)))
(define (exponent exp) (car (cdr (cdr exp))))

(define (derive exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (derive (addend exp) var)
                              (derive (augend exp) var)))
        ((product? exp) (make-sum
                         (make-product (multiplier exp)
                                       (derive (multiplicand exp) var))
                         (make-product (multiplicand exp)
                                       (derive (multiplier exp) var))))
        ((exponentiation? exp)
         (let ((e (exponent exp))
               (b (base exp)))
           (make-product e
                         (make-product (make-exponentiation b (- e 1))
                                       (derive b var)))))
        (else (error "unknown expression type -- DERIVE" exp))))

(derive 1 'x)
(derive 'x 'x)
(derive 'c 'x)
(derive (make-sum (make-product 'x 'x) 'x) 'x)
(derive (make-product (make-sum 'x 1) 'x) 'x)

(derive (make-sum 'x 3) 'x)
(derive (make-product 'x 'y) 'x)
(derive (make-product 'x 'y (make-sum 'x 3)) 'x)

;; (x^2 + 2)^4 -> 4*(x^2 + 2)^3 * (2*x)
(derive (make-exponentiation (make-sum (make-exponentiation 'x 2) 2) 4) 'x)
(derive (make-exponentiation 'x 1) 'x)


;; 2.58
(define (s/inf/make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))
(define (s/inf/sum? e) (and (pair? e) (eq? '+ (cadr e))))
(define (s/inf/addend e) (car e))
(define (s/inf/augend e) (caddr e))

(define (s/inf/make-product a1 a2)
  (cond ((or (=number? a1 0) (=number? a2 0)) 0)
        ((=number? a1 1) a2)
        ((=number? a2 1) a1)
        ((and (number? a1) (number? a2)) (* a1 a2))
        (else (list a1 '* a2))))
(define (s/inf/product? e) (and (pair? e) (eq? '* (cadr e))))
(define (s/inf/multiplier e) (car e))
(define (s/inf/multiplicand e) (caddr e))

(define (s/inf/make-exponentiation base ex)
  (cond ((=number? ex 0) 1)
        ((=number? ex 1) base)
        ((=number? base 0) 0)
        ((=number? base 1) 1)
        ((and (number? base) (number? ex)) (expt base ex))
        (else (list base '** ex))))
(define (s/inf/exponentiation? exp)
  (and (pair? exp) (eq? '** (car exp))))
(define (s/inf/base exp) (car (cdr exp)))
(define (s/inf/exponent exp) (car (cdr (cdr exp))))

(define (s/inf/derive exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((s/inf/sum? exp) (s/inf/make-sum (s/inf/derive (s/inf/addend exp) var)
                                          (s/inf/derive (s/inf/augend exp) var)))
        ((s/inf/product? exp) (s/inf/make-sum
                               (s/inf/make-product (s/inf/multiplier exp)
                                                   (s/inf/derive (s/inf/multiplicand exp) var))
                               (s/inf/make-product (s/inf/multiplicand exp)
                                                   (s/inf/derive (s/inf/multiplier exp) var))))
        ((s/inf/exponentiation? exp)
         (let ((e (s/inf/exponent exp))
               (b (s/inf/base exp)))
           (s/inf/make-product e
                               (s/inf/make-product (s/inf/make-exponentiation b (- e 1))
                                                   (s/inf/derive b var)))))
        (else (error "unknown expression type -- DERIVE" exp))))

(s/inf/derive '(x + (3 * (x + (y + 2)))) 'x)
